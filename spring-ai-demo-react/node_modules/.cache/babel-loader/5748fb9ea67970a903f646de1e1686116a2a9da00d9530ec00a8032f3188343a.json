{"ast":null,"code":"var _jsxFileName = \"/Users/nicolegasperini/Documents/Spring/spring-ai-demo/spring-ai-demo-react/src/components/ChatComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatComponent() {\n  _s();\n  const [prompt, setPrompt] = useState('');\n  const [responseText, setResponseText] = useState('');\n  const chatAI = async () => {\n    if (!imageFile) {\n      alert(\"Please select a file first.\");\n      return;\n    }\n    try {\n      const response = await fetch('/chat-ai', {\n        method: 'POST',\n        body: prompt\n      });\n      if (response.ok) {\n        const result = await response.text();\n        setResponseText(result);\n        alert('Text generated successfully');\n      } else {\n        alert('Failed to generate text');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      alert('Error generating text');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Talk to AI\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: prompt,\n      onChange: e => setPrompt(e.target.value),\n      placeholder: \"Enter a prompt for AI\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: chatAI,\n      children: \"Ask AI\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: responseText && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Generated Text: \", responseText]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 34\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n_s(ChatComponent, \"ed+qBODkpRGkZv6XAAJqF/BhQNU=\");\n_c = ChatComponent;\nexport default ChatComponent;\nvar _c;\n$RefreshReg$(_c, \"ChatComponent\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ChatComponent","_s","prompt","setPrompt","responseText","setResponseText","chatAI","imageFile","alert","response","fetch","method","body","ok","result","text","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/nicolegasperini/Documents/Spring/spring-ai-demo/spring-ai-demo-react/src/components/ChatComponent.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nfunction ChatComponent() {\n    const [prompt, setPrompt] = useState('');\n    const [responseText, setResponseText] = useState('');\n\n    const chatAI = async () => {\n        if (!imageFile) {\n            alert(\"Please select a file first.\");\n            return;\n        }\n\n        try {\n            const response = await fetch('/chat-ai', {\n                method: 'POST',\n                body: prompt,\n            });\n\n            if (response.ok) {\n                const result = await response.text();\n                setResponseText(result);\n                alert('Text generated successfully');\n            } else {\n                alert('Failed to generate text');\n            }\n        } catch (error) {\n            console.error('Error:', error);\n            alert('Error generating text');\n        }\n    };\n\n    return (\n        <div>\n            <h2>Talk to AI</h2>\n            <input\n                type=\"text\"\n                value={prompt}\n                onChange={(e) => setPrompt(e.target.value)}\n                placeholder=\"Enter a prompt for AI\"\n            />\n            <button onClick={chatAI}>Ask AI</button>\n            <div>\n                {responseText && <p>Generated Text: {responseText}</p>}\n            </div>\n        </div>\n    );\n}\n\nexport default ChatComponent;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACO,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEpD,MAAMS,MAAM,GAAG,MAAAA,CAAA,KAAY;IACvB,IAAI,CAACC,SAAS,EAAE;MACZC,KAAK,CAAC,6BAA6B,CAAC;MACpC;IACJ;IAEA,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,UAAU,EAAE;QACrCC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEV;MACV,CAAC,CAAC;MAEF,IAAIO,QAAQ,CAACI,EAAE,EAAE;QACb,MAAMC,MAAM,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;QACpCV,eAAe,CAACS,MAAM,CAAC;QACvBN,KAAK,CAAC,6BAA6B,CAAC;MACxC,CAAC,MAAM;QACHA,KAAK,CAAC,yBAAyB,CAAC;MACpC;IACJ,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAC9BR,KAAK,CAAC,uBAAuB,CAAC;IAClC;EACJ,CAAC;EAED,oBACIT,OAAA;IAAAmB,QAAA,gBACInB,OAAA;MAAAmB,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnBvB,OAAA;MACIwB,IAAI,EAAC,MAAM;MACXC,KAAK,EAAEtB,MAAO;MACduB,QAAQ,EAAGC,CAAC,IAAKvB,SAAS,CAACuB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC3CI,WAAW,EAAC;IAAuB;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CAAC,eACFvB,OAAA;MAAQ8B,OAAO,EAAEvB,MAAO;MAAAY,QAAA,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACxCvB,OAAA;MAAAmB,QAAA,EACKd,YAAY,iBAAIL,OAAA;QAAAmB,QAAA,GAAG,kBAAgB,EAACd,YAAY;MAAA;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAACrB,EAAA,CA5CQD,aAAa;AAAA8B,EAAA,GAAb9B,aAAa;AA8CtB,eAAeA,aAAa;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}